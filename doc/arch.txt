The 'new' architecture implemented after the code was split to
ohybridproxy+zonestitcher works as follows: There are essentially 4
components to a DNS 'toy':

- main (that deals with setting up the other parts + starts event loop)

- socket abstraction (socket.c) - responsible for dealing with (inbound)
  UDP/TCP connections and the DNS packets there.

- generic request abstraction (io.c) - it handles 'requests', which
  compromise of one or more queries, that are started and stopped.

- backend that actually handles query, and possibly starts sub-queries as well

Actual call flow:

- main calls backend-specific setup code

- main calls io_run(), and then (socket.c) creates sockets and starts uloop

- when new request shows up, (~per-session/message) request structure is
  added it's first query (io_req_add_query), and it is started
  (io_req_start).

- (io.c) io_req_start calls io_query_start, and then b_query_start (which
  may fail immediately, or not)

.. backend runs the queries, now and then calling io_query_stop to indicate
a single query has completed ..

- (io.c) when last io_query_stop is received, b_queries_done is called and
  backend can react. Typically io_send_reply is the correct thing to do
  here, regardless if actual reply is _desired_; the io_send_reply leads to
  clean-up path in socket.c. The actual reply is produced by
  b_produce_reply, and if nothing is returned, no actual reply is sent to
  the client.

